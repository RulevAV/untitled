//Классы (хостинг на классы не работают) не засаряют глобальное пространство имен
// Классы являются основой объектно-ориентированного программирования, но не в js.
// В js ООП и наследование основана на прототипах объектов, а не на классах.
// В ES6 добавлено поддержка классов, новый синтаксис не вводит новую объектно ориентированную модель наследования. Внутри используются все те же прототипы.
// Синтаксис классов - это так называемый Syntactic Sugar (Синтактический сахар).
// Классы — это функции, которые создают объекты.
// Объект — это экземпляр или представитель класса (т.е. объект, созданный по шаблону с определенными свойствами и методами указанных в классе).
//Классы не засаряют глобальное пространсво имен. window.Task === Task ->false
class Task {//typeof = function
    constructor(title = Task.getDefoltTitle()) { //Конструктор — это особый метод, который вызывается в момент создания объекта (т.е. при использовании слова new).
                    // Он создает свойства и инициализирует их (т.е. подготавливает объект к использованию).
                    // В классе может быть только один конструктор.
        // Свойства – это характеристики объекта, они описывают какой объект и что у него имеется.
        this.title = title;
        this._done = false;
        console.log('Создание задачи');

        Task.Count+=1;

        //Можно добавить особые свойства get и set, которые внутри класса выглядят и ведут себя как методы, а с наружи ведут и выглядят как свойства.
        // Эти свойства(методы) позволяют получить доступ и присвоить значение настоящим свойствам объекта (т.е. выступает в роли фильтра).


    }
    //Методы – это то, что объект умеет делать (т.е. его возможности); по сути это функции которые в классе называются методами.
    complete(){
        this.done = true;
        console.log(`Задача "${this.title}" выполнена`);
    }
    //Статические методы — это свойства, которые принадлежат самому классу, а не объектам, созданным на его основе.
    //Статические методы часто используются для создания вспомогательных функций.
    static getDefoltTitle(){
        return 'Задача';
    }
    get done(){
        return this._done===true ? 'Выполнена' : 'Не выполнена';
    }
    set done(value){
        if (value!==undefined &&typeof value ==='boolean')
        {
            this._done=value;
        }
        else {
            console.error('Не прошли проверку');
        }
        return this._done===true ? 'Выполнена' : 'Не выполнена';
    }
}
//Статические свойства — это свойства, которые принадлежат самому классу, а не объектам, созданным на его основе.
//Статические свойства часто используются для хранения вспомогательной информации.
Task.Count = 0;//Объявления статического свойства.

let task = new Task('Убрать комнату');//typeof = object
let task2 = new Task('Купить продукты');
let task3 = new Task();
console.log(task.title);
console.log(task2.title);
console.log(task3.title);

console.log(Task.Count);
task2.complete();
console.log(task2.done);
console.log(task3.done);
task2.done = false;
console.log(task2.done);

//Js – это больше функциональный язык нежели классический.


//безымянный класс
let Asd = class {

}
let Asd2 = class extends Asd{//prototype: Asd

}
console.dir(Asd);
console.dir(Asd2);
let Qwe = class Task2{

}
let Qwe2 = class extends Qwe{//prototype: Task2

}
console.dir(Qwe);
console.dir(Qwe2);